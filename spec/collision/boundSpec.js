// Generated by CoffeeScript 1.3.3
(function() {

  ({
    box2d: (typeof exports !== "undefined" && exports !== null) && exports || this.box2d || (this.box2d = {})
  });

  describe('Bound', function() {
    var another_bound, bound;
    bound = null;
    another_bound = null;
    beforeEach(function() {
      bound = new box2d.Bound();
      return another_bound = new box2d.Bound();
    });
    it('can be initialized', function() {
      expect(bound.value).toBe(0);
      expect(bound.proxyId).toBe(0);
      return expect(bound.stabbingCount).toBe(0);
    });
    it('can be validated', function() {
      return expect(bound.IsValid()).toBe(true);
    });
    it('can check lower', function() {
      another_bound.value = 1;
      expect(bound.IsLower()).toBe(true);
      return expect(another_bound.IsLower()).toBe(false);
    });
    it('can check upper', function() {
      another_bound.value = 1;
      expect(bound.IsUpper()).toBe(false);
      return expect(another_bound.IsUpper()).toBe(true);
    });
    return it('can swap values', function() {
      another_bound.value = 1;
      another_bound.proxyId = 2;
      another_bound.stabbingCount = 3;
      expect(bound.value).toBe(0);
      expect(bound.proxyId).toBe(0);
      expect(bound.stabbingCount).toBe(0);
      expect(another_bound.value).toBe(1);
      expect(another_bound.proxyId).toBe(2);
      expect(another_bound.stabbingCount).toBe(3);
      bound.Swap(another_bound);
      expect(bound.value).toBe(1);
      expect(bound.proxyId).toBe(2);
      expect(bound.stabbingCount).toBe(3);
      expect(another_bound.value).toBe(0);
      expect(another_bound.proxyId).toBe(0);
      return expect(another_bound.stabbingCount).toBe(0);
    });
  });

}).call(this);
