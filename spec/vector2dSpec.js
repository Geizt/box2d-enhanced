// Generated by CoffeeScript 1.3.3
(function() {

  ({
    box2d: (typeof exports !== "undefined" && exports !== null) && exports || this.box2d || (this.box2d = {})
  });

  describe('Vector2D', function() {
    var vector2d;
    vector2d = null;
    beforeEach(function() {
      return vector2d = new box2d.Vector2D(2, 3);
    });
    it('can be initialized', function() {
      expect(vector2d.x).toBe(2);
      return expect(vector2d.y).toBe(3);
    });
    it('can be re-set', function() {
      vector2d.Set(3, 5);
      expect(vector2d.x).toBe(3);
      return expect(vector2d.y).toBe(5);
    });
    it('can be negative', function() {
      var neg_vector2d;
      neg_vector2d = vector2d.Negative();
      expect(neg_vector2d.x).toBe(-2);
      return expect(neg_vector2d.y).toBe(-3);
    });
    it('can be copied', function() {
      var copy_vector2d;
      copy_vector2d = vector2d.Copy();
      expect(copy_vector2d.x).toBe(2);
      return expect(copy_vector2d.y).toBe(3);
    });
    it('can be added', function() {
      var another_vector2d;
      another_vector2d = new box2d.Vector2D(1, 2);
      vector2d.Add(another_vector2d);
      expect(vector2d.x).toBe(3);
      return expect(vector2d.y).toBe(5);
    });
    it('can be subtracted', function() {
      var another_vector2d;
      another_vector2d = new box2d.Vector2D(1, 2);
      vector2d.Subtract(another_vector2d);
      expect(vector2d.x).toBe(1);
      return expect(vector2d.y).toBe(1);
    });
    it('can be multiplied by a scalar', function() {
      vector2d.Multiply(3);
      expect(vector2d.x).toBe(6);
      return expect(vector2d.y).toBe(9);
    });
    it('can be a cross product', function() {
      vector2d.CrossVF(3);
      expect(vector2d.x).toBe(9);
      expect(vector2d.y).toBe(-6);
      vector2d.Set(2, 3);
      vector2d.CrossFV(3);
      expect(vector2d.x).toBe(-9);
      return expect(vector2d.y).toBe(6);
    });
    it('can be minimum', function() {
      var another_vector2d;
      another_vector2d = new box2d.Vector2D(1, 5);
      vector2d.MinV(another_vector2d);
      expect(vector2d.x).toBe(1);
      return expect(vector2d.y).toBe(3);
    });
    it('can be maximum', function() {
      var another_vector2d;
      another_vector2d = new box2d.Vector2D(1, 5);
      vector2d.MaxV(another_vector2d);
      expect(vector2d.x).toBe(2);
      return expect(vector2d.y).toBe(5);
    });
    it('can be absolute', function() {
      vector2d.Set(-4, -6);
      vector2d.Abs();
      expect(vector2d.x).toBe(4);
      return expect(vector2d.y).toBe(6);
    });
    it('can be normalized', function() {
      var result;
      result = vector2d.Normalize().Length();
      return expect(result).toBe(1);
    });
    it('can be a string', function() {
      var result;
      result = vector2d.ToString();
      return expect(result).toBe('( 2, 3 )');
    });
    return it('can be serialized', function() {
      var result;
      result = vector2d.Serialize();
      return expect(result).toBe('{ "x": 2, "y": 3 }');
    });
  });

}).call(this);
