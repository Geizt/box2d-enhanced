// Generated by CoffeeScript 1.3.3
(function() {

  ({
    box2d: (typeof exports !== "undefined" && exports !== null) && exports || this.box2d || (this.box2d = {})
  });

  box2d.Matrix2x2 = (function() {

    function Matrix2x2(vector_1, vector_2, angle) {
      var cosinus, sinus;
      if (angle == null) {
        angle = 0;
      }
      if ((vector_1 != null) && !vector_1.IsValid() || (vector_2 != null) && !vector_2.IsValid() || (angle != null) && !box2d.Math.IsValid(angle)) {
        throw new TypeError;
      } else {
        this.column_1 = new box2d.Vector2D();
        this.column_2 = new box2d.Vector2D();
        if (vector_1 !== null && vector_2 !== null) {
          this.column_1.SetV(vector_1);
          this.column_2.SetV(vector_2);
        } else {
          cosinus = Math.cos(angle);
          sinus = Math.sin(angle);
          this.column_1.x = cosinus;
          this.column_1.y = sinus;
          this.column_2.x = -sinus;
          this.column_2.y = cosinus;
        }
      }
    }

    Matrix2x2.prototype.IsValid = function() {
      return this.column_1 !== null && this.column_1.IsValid() && this.column_2 !== null && this.column_2.IsValid();
    };

    Matrix2x2.prototype.Set = function(angle) {
      var cosinus, sinus;
      if (angle === null || !box2d.Math.IsValid(angle)) {
        throw new TypeError;
      } else {
        cosinus = Math.cos(angle);
        sinus = Math.sin(angle);
        this.column_1.x = cosinus;
        this.column_1.y = sinus;
        this.column_2.x = -sinus;
        this.column_2.y = cosinus;
      }
      return this;
    };

    Matrix2x2.prototype.SetVV = function(vector_1, vector_2) {
      if (vector_1 === null || !vector_1.IsValid() || vector_2 === null || !vector_2.IsValid()) {
        throw new TypeError;
      } else {
        this.column_1.SetV(vector_1);
        this.column_2.SetV(vector_2);
      }
      return this;
    };

    Matrix2x2.prototype.SetM = function(matrix) {
      if (!matrix.IsValid()) {
        throw new TypeError;
      } else {
        this.column_1.SetV(matrix.column_1);
        return this.column_2.SetV(matrix.column_2);
      }
    };

    Matrix2x2.prototype.Copy = function() {
      return new box2d.Matrix2x2(this.column_1, this.column_2, 0);
    };

    Matrix2x2.prototype.AddM = function(matrix) {
      if (!matrix.IsValid()) {
        throw new TypeError;
      } else {
        this.column_1.x += matrix.column_1.x;
        this.column_1.y += matrix.column_1.y;
        this.column_2.x += matrix.column_2.x;
        return this.column_2.y += matrix.column_2.y;
      }
    };

    Matrix2x2.prototype.SetIdentity = function() {
      this.column_1.x = 1.0;
      this.column_1.y = 0.0;
      this.column_2.x = 0.0;
      return this.column_2.y = 1.0;
    };

    Matrix2x2.prototype.SetZero = function() {
      this.column_1.x = 0.0;
      this.column_1.y = 0.0;
      this.column_2.x = 0.0;
      return this.column_2.y = 0.0;
    };

    Matrix2x2.prototype.Invert = function(matrix) {
      var a_11, a_12, a_21, a_22, det;
      if (!matrix.IsValid()) {
        throw new TypeError;
      } else {
        a_11 = this.column_1.x;
        a_12 = this.column_2.x;
        a_21 = this.column_1.y;
        a_22 = this.column_2.y;
        det = a_11 * a_22 - a_12 * a_21;
        det = 1.0 / det;
        matrix.column_1.x = det * a_22;
        matrix.column_1.y = -det * a_21;
        matrix.column_2.x = -det * a_12;
        matrix.column_2.y = det * a_11;
      }
      return matrix;
    };

    Matrix2x2.prototype.Solve = function(vector, bX, bY) {
      var a_11, a_12, a_21, a_22, det;
      if (!vector.IsValid()) {
        throw new TypeError;
      } else {
        a_11 = this.column_1.x;
        a_12 = this.column_2.x;
        a_21 = this.column_1.y;
        a_22 = this.column_2.y;
        det = a_11 * a_22 - a_12 * a_21;
        det = 1.0 / det;
        vector.x = det * (a_22 * bX - a_12 * bY);
        vector.y = det * (a_11 * bY - a_21 * bX);
      }
      return vector;
    };

    Matrix2x2.prototype.Abs = function() {
      this.column_1.Abs();
      return this.column_2.Abs();
    };

    return Matrix2x2;

  })();

}).call(this);
