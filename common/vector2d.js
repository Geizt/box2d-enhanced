// Generated by CoffeeScript 1.3.3
(function() {

  ({
    box2d: (typeof exports !== "undefined" && exports !== null) && exports || this.box2d || (this.box2d = {})
  });

  box2d.Vector2D = (function() {

    function Vector2D(x, y) {
      if (x !== null && isNaN(x) || y !== null && isNaN(y)) {
        throw new TypeError;
      } else {
        this.x = x != null ? x : 0.0;
        this.y = y != null ? y : 0.0;
      }
    }

    Vector2D.prototype.SetZero = function() {
      this.x = 0.0;
      this.y = 0.0;
      return this;
    };

    Vector2D.prototype.Set = function(x, y) {
      if (isNaN(x) || isNaN(y)) {
        throw new TypeError;
      } else {
        this.x = x;
        this.y = y;
      }
      return this;
    };

    Vector2D.prototype.SetV = function(vector) {
      if (vector === null || isNaN(vector.x) || isNaN(vector.y)) {
        throw new TypeError;
      } else {
        this.x = vector.x;
        this.y = vector.y;
      }
      return this;
    };

    Vector2D.prototype.Negative = function() {
      return new box2d.Vector2D(-this.x, -this.y);
    };

    Vector2D.prototype.Copy = function() {
      return new box2d.Vector2D(this.x, this.y);
    };

    Vector2D.prototype.Add = function(vector) {
      if (vector === null || isNaN(vector.x) || isNaN(vector.y)) {
        throw new TypeError;
      } else {
        this.x += vector.x;
        this.y += vector.y;
      }
      return this;
    };

    Vector2D.prototype.Subtract = function(vector) {
      if (vector === null || isNaN(vector.x) || isNaN(vector.y)) {
        throw new TypeError;
      } else {
        this.x -= vector.x;
        this.y -= vector.y;
      }
      return this;
    };

    Vector2D.prototype.Multiply = function(scalar) {
      if (vector === null || isNaN(scalar)) {
        throw new TypeError;
      } else {
        this.x *= scalar;
        this.y *= scalar;
      }
      return this;
    };

    return Vector2D;

  })();

}).call(this);
