// Generated by CoffeeScript 1.3.3
(function() {

  ({
    box2d: (typeof exports !== "undefined" && exports !== null) && exports || this.box2d || (this.box2d = {})
  });

  box2d.Vector2D = (function() {

    function Vector2D(x, y) {
      if (x !== null && !box2d.Math.IsValid(x) || y !== null && !box2d.Math.IsValid(y)) {
        throw new TypeError;
      } else {
        this.x = x != null ? x : 0.0;
        this.y = y != null ? y : 0.0;
      }
    }

    Vector2D.prototype.IsValid = function() {
      return box2d.Math.IsValid(this.x) && box2d.Math.IsValid(this.y);
    };

    Vector2D.prototype.SetZero = function() {
      this.x = 0.0;
      this.y = 0.0;
      return this;
    };

    Vector2D.prototype.Set = function(x, y) {
      if (!box2d.Math.IsValid(x) || !box2d.Math.IsValid(y)) {
        throw new TypeError;
      } else {
        this.x = x;
        this.y = y;
      }
      return this;
    };

    Vector2D.prototype.SetV = function(vector) {
      if (vector === null || !vector.IsValid()) {
        throw new TypeError;
      } else {
        this.x = vector.x;
        this.y = vector.y;
      }
      return this;
    };

    Vector2D.prototype.Negative = function() {
      return new box2d.Vector2D(-this.x, -this.y);
    };

    Vector2D.prototype.Copy = function() {
      return new box2d.Vector2D(this.x, this.y);
    };

    Vector2D.prototype.Add = function(vector) {
      if (vector === null || !vector.IsValid()) {
        throw new TypeError;
      } else {
        this.x += vector.x;
        this.y += vector.y;
      }
      return this;
    };

    Vector2D.prototype.Subtract = function(vector) {
      if (vector === null || !vector.IsValid()) {
        throw new TypeError;
      } else {
        this.x -= vector.x;
        this.y -= vector.y;
      }
      return this;
    };

    Vector2D.prototype.Multiply = function(scalar) {
      if (scalar === null || !box2d.Math.IsValid(scalar)) {
        throw new TypeError;
      } else {
        this.x *= scalar;
        this.y *= scalar;
      }
      return this;
    };

    Vector2D.prototype.MulM = function(matrix) {
      var tX;
      if (matrix === null || !matrix.IsValid()) {
        throw new TypeError;
      } else {
        tX = this.x;
        this.x = matrix.col1.x * tX + matrix.col2.x * this.y;
        this.y = matrix.col1.y * tX + matrix.col2.y * this.y;
      }
      return this;
    };

    Vector2D.prototype.MulTM = function(matrix) {
      var tX;
      if (matrix === null || !matrix.IsValid()) {
        throw new TypeError;
      } else {
        tX = box2d.Math.Dot(this, matrix.col1);
        this.y = box2d.Math.Dot(this, matrix.col2);
        this.x = tX;
      }
      return this;
    };

    Vector2D.prototype.CrossVF = function(scalar) {
      var tX;
      if (scalar === null || !box2d.Math.IsValid(scalar)) {
        throw new TypeError;
      } else {
        tX = this.x;
        this.x = scalar * this.y;
        this.y = -scalar * tX;
      }
      return this;
    };

    Vector2D.prototype.CrossFV = function(scalar) {
      var tX;
      if (scalar === null || !box2d.Math.IsValid(scalar)) {
        throw new TypeError;
      } else {
        tX = this.x;
        this.x = -scalar * this.y;
        this.y = scalar * tX;
      }
      return this;
    };

    Vector2D.prototype.MinV = function(vector) {
      if (vector === null || !vector.IsValid()) {
        throw new TypeError;
      } else {
        this.x = this.x < vector.x ? this.x : vector.x;
        this.y = this.y < vector.y ? this.y : vector.y;
      }
      return this;
    };

    Vector2D.prototype.MaxV = function(vector) {
      if (vector === null || !vector.IsValid()) {
        throw new TypeError;
      } else {
        this.x = this.x > vector.x ? this.x : vector.x;
        return this.y = this.y > vector.y ? this.y : vector.y;
      }
    };

    Vector2D.prototype.Abs = function() {
      this.x = Math.abs(this.x);
      this.y = Math.abs(this.y);
      return this;
    };

    Vector2D.prototype.Length = function() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    };

    Vector2D.prototype.Normalize = function() {
      var invLength, length;
      length = this.Length();
      if (length < Number.MIN_VALUE) {
        return 0.0;
      }
      invLength = 1.0 / length;
      this.x *= invLength;
      this.y *= invLength;
      return this;
    };

    Vector2D.prototype.ToString = function() {
      return '( ' + this.x + ', ' + this.y + ' )';
    };

    Vector2D.prototype.Serialize = function() {
      return '{ "x": ' + this.x + ', "y": ' + this.y + ' }';
    };

    return Vector2D;

  })();

}).call(this);
